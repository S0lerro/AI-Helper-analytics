from calendar import month

import telebot
from telebot import types
import sqlite3
import logging
import datetime


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

user_articles = {}
categories = {
    "Environmental": [
        "Waste Management",
        "Climate Risks",
        "Greenhouse Gas Emissions",
        "Air Pollution",
        "Energy Efficiency and Renewable",
        "Hazardous Materials Management",
        "Soil and Groundwater Impact",
        "Natural Resources",
        "Planning Limitations",
        "Landscape Transformation",
        "Land Rehabilitation",
        "Biodiversity",
        "Animal Welfare",
        "Emergencies (Environmental)",
        "Environmental Management",
        "Supply Chain (Environmental)",
        "Physical Impacts",
        "Land Acquisition and Resettlement (Environmental)",
        "Wastewater Management",
        "Water Consumption",
        "Surface Water Pollution"
    ],
    "Social": [
        "Emergencies (Social)",
        "Employee Health and Safety",
        "Land Acquisition and Resettlement (Social)",
        "Product Safety and Quality",
        "Indigenous People",
        "Human Rights",
        "Communities Health and Safety",
        "Freedom of Association and Right to Organise",
        "Minimum Age and Child Labor",
        "Data Safety",
        "Forced Labor",
        "Discrimination",
        "Cultural Heritage",
        "Supply Chain (Social)",
        "Retrenchment",
        "Labor Relations Management"
    ]
}
dates = ['–≠—Ç–∞ –Ω–µ–¥–µ–ª—è', '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è', '–ó–∞ –≤–µ—Å—å –º–µ—Å—è—Ü']

translation_dict = {
    "Environmental": "–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞",
    "Social": "–û–±—â–µ—Å—Ç–≤–æ",
    "Waste Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–∞–º–∏",
    "Climate Risks": "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏",
    "Greenhouse Gas Emissions": "–í—ã–±—Ä–æ—Å—ã –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤",
    "Air Pollution": "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞",
    "Energy Efficiency and Renewable": "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è",
    "Hazardous Materials Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏",
    "Soil and Groundwater Impact": "–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–æ—á–≤—É –∏ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –≤–æ–¥—ã",
    "Natural Resources": "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
    "Planning Limitations": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "Landscape Transformation": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞",
    "Land Rehabilitation": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–µ–º–µ–ª—å",
    "Biodiversity": "–ë–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ",
    "Animal Welfare": "–ë–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "Emergencies (Environmental)": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
    "Environmental Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π",
    "Supply Chain (Environmental)": "–¶–µ–ø–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è)",
    "Physical Impacts": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è",
    "Land Acquisition and Resettlement (Environmental)": "–ó–∞—Ö–≤–∞—Ç –∏ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ –∑–µ–º–µ–ª—å (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ)",
    "Wastewater Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ—á–Ω—ã–º–∏ –≤–æ–¥–∞–º–∏",
    "Water Consumption": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã",
    "Surface Water Pollution": "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –≤–æ–¥",
    "Emergencies (Social)": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
    "Employee Health and Safety": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    "Land Acquisition and Resettlement (Social)": "–ó–∞—Ö–≤–∞—Ç –∏ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ –∑–µ–º–µ–ª—å (—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ)",
    "Product Safety and Quality": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
    "Indigenous People": "–ö–æ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Ä–æ–¥—ã",
    "Human Rights": "–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞",
    "Communities Health and Safety": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤",
    "Freedom of Association and Right to Organise": "–°–≤–æ–±–æ–¥–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é",
    "Minimum Age and Child Labor": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –¥–µ—Ç—Å–∫–∏–π —Ç—Ä—É–¥",
    "Data Safety": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
    "Forced Labor": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä—É–¥",
    "Discrimination": "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è",
    "Cultural Heritage": "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ",
    "Supply Chain (Social)": "–¶–µ–ø–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ (—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è)",
    "Retrenchment": "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —à—Ç–∞—Ç–∞",
    "Labor Relations Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏"
}

t = open('../TOKEN.txt')
TOKEN = t.read().strip()
t.close()
bot = telebot.TeleBot(TOKEN)


def get_articles_from_db(subcategories):
    try:
        conn = sqlite3.connect("../Executing/websites.db")
        cursor = conn.cursor()
        placeholders = ",".join(["?"] * len(subcategories))
        cursor.execute(f"""
            SELECT headline, time_author, description, link, category
            FROM AllArticles 
            WHERE category IN ({placeholders})
        """, subcategories)
        articles = cursor.fetchall()
        conn.close()
        return articles
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        return []


def show_article(chat_id, index, m_id):
    try:
        data = user_articles.get(chat_id)
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—å–∏ #{index} –¥–ª—è chat_id {chat_id}. –î–∞–Ω–Ω—ã–µ: {data}")

        if not data or index >= len(data['articles']):
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return False

        article = data['articles'][index]
        if len(article) < 5:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏: {article}")
            return False

        headline = article[0]
        time_author = article[1] if len(article) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        description = article[2] if len(article) > 2 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        link = article[3] if len(article) > 3 else "#"
        category = article[4] if len(article) > 4 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        source = article[5] if len(article) > 5 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"


        # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        clickable_headline = f'<a href="{link}">{headline}</a>'

        message_text = (
            f"üìå <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {clickable_headline}\n\n"
            f"‚è≥ <b>–í—Ä–µ–º—è:</b> {time_author}\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:300] + '...' if len(description) > 300 else description}\n\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {translation_dict.get(category, category)}\n\n"
            f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {link}"
        )

        markup = types.InlineKeyboardMarkup()
        if index < len(data['articles']) - 1:
            markup.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚Üí", callback_data="next_article"))

        if index > 0:
            markup.add(types.InlineKeyboardButton(text="‚üµ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev_article"))

        markup.add(types.InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu"))

        if not m_id:
            bot.send_message(
                chat_id,
                message_text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )

        else:
            bot.edit_message_text(
                message_text,
                chat_id,
                m_id,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            logger.info(f"–°—Ç–∞—Ç—å—è #{index} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_article: {str(e)}")
        return False


@bot.message_handler(commands=["start"])
def start(message):
    try:
        menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
        btn2 = types.KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
        menu_markup.add(btn1, btn2)

        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —Ç–µ–º–µ AI for Good –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü üöÄ.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—É—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã üíØ",
            reply_markup=menu_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        if message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å":
            category_markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(text="–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞", callback_data="Environmental")
            btn2 = types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ", callback_data="Social")
            category_markup.add(btn1, btn2)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=category_markup)
        elif message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏":
            back_to_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
            back_to_menu.add(btn)
            bot.send_message(message.chat.id, "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: \n@alinesmakotina", reply_markup = back_to_menu)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_text: {str(e)}")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id

        if call.data in ["Environmental", "Social"]:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = categories[call.data]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            markup = types.InlineKeyboardMarkup()
            for date in dates:
                btn = types.InlineKeyboardButton(date, callback_data=f"date_{date}_{call.data}")
                markup.add(btn)

            bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=markup
            )

        elif call.data.startswith("date_"):
            _, date, category = call.data.split("_")
            subcategories = categories[category]

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏
            articles = get_articles_from_db(subcategories)

            if not articles:
                bot.send_message(chat_id, "–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            user_articles[chat_id] = {
                'category': category,
                'articles': articles,
                'current_index': 0
            }
            show_article(chat_id, 0, 0)

        elif call.data[4::] == "_article":
            user_data = user_articles.get(chat_id)
            if not user_data:
                return

            if call.data.startswith("next"):
                user_data['current_index'] += 1
            if call.data.startswith("prev"):
                user_data['current_index'] -= 1

            if user_data['current_index'] >= len(user_data['articles']):
                bot.send_message(chat_id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è")
                user_data['current_index'] = len(user_data['articles']) - 1
                return

            show_article(chat_id, user_data['current_index'], call.message.id)

        elif call.data == "back_to_menu":
            start(call.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
